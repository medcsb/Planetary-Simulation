cmake_minimum_required(VERSION 3.16)
set(PROJECT_NAME "Photon")
project(${PROJECT_NAME})

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# use debugs stuff like lasan
if (MSVC)
    # Produce full debug info in PDBs
    add_compile_options(/Zi)
    add_link_options(/DEBUG /INCREMENTAL:NO)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
endif()
set(CMAKE_BUILD_TYPE Debug)

add_compile_definitions(SHADER_DIR="${CMAKE_SOURCE_DIR}/shaders/")
add_compile_definitions(TEXTURE_DIR="${CMAKE_SOURCE_DIR}/assets/textures/")
add_compile_definitions(MODEL_DIR="${CMAKE_SOURCE_DIR}/assets/models/")

# Add your include and src folders
include_directories(include)

# GLFW
add_subdirectory(extern/glfw)

# GLAD2 (header-only loader generated by glad)
add_library(glad STATIC
    extern/glad/src/glad.c
)
target_include_directories(glad PUBLIC extern/glad/include)

# GLM (header-only)
add_subdirectory(extern/glm)

# ImGui (source files directly)
file(GLOB IMGUI_SRC
    extern/imgui/*.cpp
    extern/imgui/backends/*.cpp
)
add_library(imgui STATIC ${IMGUI_SRC})
target_include_directories(imgui PUBLIC
    extern/imgui
    extern/imgui/backends
    extern/glfw/include
)

# stb_image (header-only)
set(STB_SRC
    extern/single_header_libs/stb_image_impl.cpp
)

# imFileDialog
add_library(imfiledialog STATIC 
    extern/fileDialog/ImFileDialog.cpp
)
target_link_libraries(imfiledialog PUBLIC imgui)
target_include_directories(imfiledialog PUBLIC
    extern/fileDialog
    extern/single_header_libs
)

# Your main application
file(GLOB ENGINE_SRC
    Engine/*.cpp
)

file(GLOB RENDERER_SRC
    Renderer/*.cpp
)

file(GLOB RENDER_SYSTEMS_SRC
    Renderer/systems/*.cpp
)

file(GLOB PHYSICS_SRC
    Physics/*.cpp
)

add_executable(${PROJECT_NAME}
    ./main.cpp
    ${RENDERER_SRC}
    ${ENGINE_SRC}
    ${RENDER_SYSTEMS_SRC}
    ${PHYSICS_SRC}
    ${STB_SRC}
)

target_link_libraries(${PROJECT_NAME} PRIVATE
    glfw
    glad
    imgui
    imfiledialog
)

# On Linux, you may need pthread and dl
if (WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE opengl32)
elseif(UNIX AND NOT APPLE)
    target_link_libraries(${PROJECT_NAME} PRIVATE dl pthread)
endif()

# Include dirs
target_include_directories(${PROJECT_NAME} PRIVATE
    extern/glm
    Engine/include
    Renderer/include
    Renderer/
    Physics/
    include/
)